--
-- File generated with SQLiteStudio v3.2.1 on Mon Nov 30 15:03:27 2020
--
-- Text encoding used: System
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: ACCOUNT
CREATE TABLE ACCOUNT (Account_number INT NOT NULL, Username VARCHAR (15) NOT NULL, Street CHAR (30) NOT NULL, ZipCode CHAR (5) NOT NULL, Karma_points INT, Phone_number CHAR (10) NOT NULL, FName VARCHAR (30) NOT NULL, LName VARCHAR (30) NOT NULL, PRIMARY KEY (Account_number));

-- Table: ZIP
CREATE TABLE ZIP
   (ZipCode CHAR(5) NOT NULL,
    City VARCHAR(30) NOT NULL,
    State VARCHAR(30) NOT NULL,
    PRIMARY KEY (ZipCode));

-- Table: BUYER
CREATE TABLE BUYER
 (Account_number INT NOT NULL,
  PRIMARY KEY(Account_number),
  FOREIGN KEY(Account_number) REFERENCES ACCOUNT(Account_number) ON DELETE CASCADE);

-- Table: IMAGE
CREATE TABLE IMAGE
   (ImageID INT NOT NULL,
    Creation_date DATE NOT NULL,
    Link VARCHAR(60) NOT NULL,
    PRIMARY KEY (ImageID));

-- Table: ORDERS
CREATE TABLE ORDERS (Order_Number INT NOT NULL, Order_Date DATE NOT NULL, CartID INT NOT NULL, FOREIGN KEY (CartID) REFERENCES SHOPPING_CART (CartID) ON DELETE CASCADE, PRIMARY KEY (Order_Number));

-- Table: PAYMENT
CREATE TABLE PAYMENT
(PaymentID INT NOT NULL,
 Type_of_Payment VARCHAR(10) NOT NULL,
 Payment_Account_Number INT NOT NULL,
 ExpDate DATE NOT NULL,
 Order_Number INT NOT NULL,
Account_number INT NOT NULL,
 FOREIGN KEY (Order_Number) REFERENCES ORDERS(Order_Number) ON DELETE CASCADE,
 FOREIGN KEY (Account_Number) REFERENCES Buyer(Account_number) ON DELETE CASCADE,
 PRIMARY KEY(PaymentID));

-- Table: PAYMENT_METHODS
CREATE TABLE PAYMENT_METHODS
    (Method_name VARCHAR(15) NOT NULL,
     StoreID INT NOT NULL,
     FOREIGN KEY (StoreID) REFERENCES VIRTUAL_STOREFRONT(StoreID) ON DELETE CASCADE,
     PRIMARY KEY (Method_name, StoreID));

-- Table: PRODUCT
CREATE TABLE PRODUCT
  (ProductID INT NOT NULL,
   StoreID INT NOT NULL,
   Name VARCHAR(15) NOT NULL,
   Quantity INT,
   Availability VARCHAR(15) NOT NULL,
   Price DECIMAL(15, 2) NOT NULL CHECK(Price > 0),
   Type VARCHAR(15) NOT NULL,
  PRIMARY KEY (ProductID),
  FOREIGN KEY (StoreID) REFERENCES Virtual_storefront(StoreID) ON DELETE CASCADE);

-- Table: PRODUCT_IMAGE
CREATE TABLE PRODUCT_IMAGE
   (ImageID INT NOT NULL,
    ProductID INT NOT NULL,
    FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
FOREIGN KEY (ImageID) REFERENCES IMAGE(ImageID) ON DELETE CASCADE,
    PRIMARY KEY (ImageId, ProductID));

-- Table: SELLER
CREATE TABLE SELLER
  (Account_number INT NOT NULL,
   PRIMARY KEY(Account_number),
   FOREIGN KEY(Account_number) REFERENCES ACCOUNT(Account_number) ON DELETE CASCADE);

-- Table: SHOP_PRODUCT
CREATE TABLE SHOP_PRODUCT
(CartID INT NOT NULL,
ProductID INT NOT NULL,
Quantity INT NOT NULL,
FOREIGN KEY (CartID) REFERENCES SHOPPING_CART(CartID) ON DELETE CASCADE,
FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
PRIMARY KEY (CartID, ProductID));

-- Table: SHOPPING_CART
CREATE TABLE SHOPPING_CART (CartID INT NOT NULL, Purchased BOOLEAN NOT NULL, Account_number INT NOT NULL, FOREIGN KEY (Account_Number) REFERENCES Buyer (Account_number) ON DELETE CASCADE, PRIMARY KEY (CartID));

-- Table: VIRTUAL_STOREFRONT
CREATE TABLE VIRTUAL_STOREFRONT
    (StoreID INT NOT NULL,
     Account_number INT NOT NULL,
     Name VARCHAR(15) NOT NULL,
     PRIMARY KEY (StoreID)
    FOREIGN KEY (Account_number) REFERENCES SELLER(Account_number) ON DELETE CASCADE);

-- Table: WISH_PRODUCT
CREATE TABLE WISH_PRODUCT
   (WishID INT NOT NULL,
    ProductID INT NOT NULL,
Quantity INT NOT NULL,
    FOREIGN KEY (WishID) REFERENCES WISHLIST(WishID) ON DELETE CASCADE,
    FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    PRIMARY KEY (WishID, ProductID));

-- Table: WISHLIST
CREATE TABLE "WISHLIST"
(WishID INT NOT NULL,
Account_number INT NOT NULL,
FOREIGN KEY (Account_Number) REFERENCES Buyer(Account_number) ON DELETE CASCADE,
PRIMARY KEY(WishID));

-- Table: BUYER_FEEDBACK
CREATE TABLE BUYER_FEEDBACK
   (ProductID INT NOT NULL,
    Account_Number INT NOT NULL,
Feedback VARCHAR(100) NOT NULL,
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID) ON DELETE CASCADE,
    FOREIGN KEY (Account_Number) REFERENCES BUYER(Account_Number) ON DELETE CASCADE,
    PRIMARY KEY (ProductID, Account_Number));

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

-- View: Total IP purchases
CREATE VIEW [Total_IP_Purchases_By_Each_Buyer] AS
SELECT BUYER.Account_number, SUM(SHOP_PRODUCT.Quantity) 
FROM (((BUYER NATURAL JOIN SHOPPING_CART) NATURAL JOIN ORDERS) NATURAL JOIN SHOP_PRODUCT)
WHERE SHOPPING_CART.purchased = TRUE
GROUP BY account_number;

--View: Total spent by each buyer
CREATE VIEW [Total_spent_by_each_buyer] AS
SELECT BUYER.Account_Number, SUM(PRODUCT.price * SHOP_PRODUCT.Quantity) AS total
FROM BUYER, ORDERS, SHOPPING_CART, SHOP_PRODUCT, PRODUCT
WHERE BUYER.Account_number = SHOPPING_CART.Account_number AND ORDERS.CartID = SHOPPING_CART.CartID AND SHOPPING_CART.CartID = SHOP_PRODUCT.CartID AND PRODUCT.ProductID = SHOP_PRODUCT.ProductID AND SHOPPING_CART.purchased = TRUE
GROUP BY BUYER.Account_Number;

CREATE INDEX image_date ON IMAGE (creation_date);
CREATE INDEX Pname ON PRODUCT(Price);